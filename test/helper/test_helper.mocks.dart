// Mocks generated by Mockito 5.4.4 from annotations
// in praktitask/test/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:os_basecode/os_basecode.dart' as _i3;
import 'package:praktitask/home/data/datasource/home_local_datasource.dart'
    as _i5;
import 'package:praktitask/home/data/datasource/home_remote_datasource.dart'
    as _i7;
import 'package:praktitask/home/data/models/todo_model.dart' as _i2;
import 'package:praktitask/home/domain/entities/todo_entity.dart' as _i9;
import 'package:praktitask/home/domain/repository/repository.dart' as _i8;
import 'package:praktitask/search/data/datasource/search_local_datasource.dart'
    as _i11;
import 'package:praktitask/search/domain/repository/repository.dart' as _i10;
import 'package:praktitask/utility/database.dart' as _i12;
import 'package:sqflite/sqflite.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTodoModel_0 extends _i1.SmartFake implements _i2.TodoModel {
  _FakeTodoModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_2 extends _i1.SmartFake implements _i4.Database {
  _FakeDatabase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeLocalDataSource extends _i1.Mock
    implements _i5.HomeLocalDataSource {
  MockHomeLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.TodoModel> saveTodo(_i2.TodoModel? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveTodo,
          [todo],
        ),
        returnValue: _i6.Future<_i2.TodoModel>.value(_FakeTodoModel_0(
          this,
          Invocation.method(
            #saveTodo,
            [todo],
          ),
        )),
      ) as _i6.Future<_i2.TodoModel>);

  @override
  _i6.Future<List<_i2.TodoModel>> fetchAllTodos(String? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllTodos,
          [date],
        ),
        returnValue: _i6.Future<List<_i2.TodoModel>>.value(<_i2.TodoModel>[]),
      ) as _i6.Future<List<_i2.TodoModel>>);

  @override
  _i6.Future<List<_i2.TodoModel>> searchTodos(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchTodos,
          [query],
        ),
        returnValue: _i6.Future<List<_i2.TodoModel>>.value(<_i2.TodoModel>[]),
      ) as _i6.Future<List<_i2.TodoModel>>);

  @override
  _i6.Future<int> updateTodo(_i2.TodoModel? todoModel) => (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [todoModel],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<int> deleteTodo(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [id],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);
}

/// A class which mocks [HomeRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRemoteDataSource extends _i1.Mock
    implements _i7.HomeRemoteDataSource {
  MockHomeRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [HomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepository extends _i1.Mock implements _i8.HomeRepository {
  MockHomeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Either<_i3.Failure, _i9.TodoEntity>> saveTodo(
          _i9.TodoEntity? todoEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveTodo,
          [todoEntity],
        ),
        returnValue: _i6.Future<_i3.Either<_i3.Failure, _i9.TodoEntity>>.value(
            _FakeEither_1<_i3.Failure, _i9.TodoEntity>(
          this,
          Invocation.method(
            #saveTodo,
            [todoEntity],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i3.Failure, _i9.TodoEntity>>);

  @override
  _i6.Future<_i3.Either<_i3.Failure, List<_i9.TodoEntity>>> fetchAllTodos(
          String? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllTodos,
          [date],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i3.Failure, List<_i9.TodoEntity>>>.value(
                _FakeEither_1<_i3.Failure, List<_i9.TodoEntity>>(
          this,
          Invocation.method(
            #fetchAllTodos,
            [date],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i3.Failure, List<_i9.TodoEntity>>>);

  @override
  _i6.Future<_i3.Either<_i3.Failure, List<_i9.TodoEntity>>> searchTodos(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchTodos,
          [query],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i3.Failure, List<_i9.TodoEntity>>>.value(
                _FakeEither_1<_i3.Failure, List<_i9.TodoEntity>>(
          this,
          Invocation.method(
            #searchTodos,
            [query],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i3.Failure, List<_i9.TodoEntity>>>);

  @override
  _i6.Future<_i3.Either<_i3.Failure, int>> deleteTodo(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [id],
        ),
        returnValue: _i6.Future<_i3.Either<_i3.Failure, int>>.value(
            _FakeEither_1<_i3.Failure, int>(
          this,
          Invocation.method(
            #deleteTodo,
            [id],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i3.Failure, int>>);

  @override
  _i6.Future<_i3.Either<_i3.Failure, int>> updateTodo(
          _i9.TodoEntity? todoEntity) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [todoEntity],
        ),
        returnValue: _i6.Future<_i3.Either<_i3.Failure, int>>.value(
            _FakeEither_1<_i3.Failure, int>(
          this,
          Invocation.method(
            #updateTodo,
            [todoEntity],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i3.Failure, int>>);
}

/// A class which mocks [SearchRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchRepository extends _i1.Mock implements _i10.SearchRepository {
  MockSearchRepository() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [SearchLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchLocalDataSource extends _i1.Mock
    implements _i11.SearchLocalDataSource {
  MockSearchLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i12.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i6.Future<_i4.Database>.value(_FakeDatabase_2(
          this,
          Invocation.getter(#database),
        )),
      ) as _i6.Future<_i4.Database>);

  @override
  _i6.Future<_i2.TodoModel> createTodo(_i2.TodoModel? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTodo,
          [todo],
        ),
        returnValue: _i6.Future<_i2.TodoModel>.value(_FakeTodoModel_0(
          this,
          Invocation.method(
            #createTodo,
            [todo],
          ),
        )),
      ) as _i6.Future<_i2.TodoModel>);

  @override
  _i6.Future<List<_i2.TodoModel>> getAllTodosOrderedByDateAndTime(
          String? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTodosOrderedByDateAndTime,
          [date],
        ),
        returnValue: _i6.Future<List<_i2.TodoModel>>.value(<_i2.TodoModel>[]),
      ) as _i6.Future<List<_i2.TodoModel>>);

  @override
  _i6.Future<_i2.TodoModel?> readTodo(int? id) => (super.noSuchMethod(
        Invocation.method(
          #readTodo,
          [id],
        ),
        returnValue: _i6.Future<_i2.TodoModel?>.value(),
      ) as _i6.Future<_i2.TodoModel?>);

  @override
  _i6.Future<List<_i2.TodoModel>> searchTodos(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchTodos,
          [query],
        ),
        returnValue: _i6.Future<List<_i2.TodoModel>>.value(<_i2.TodoModel>[]),
      ) as _i6.Future<List<_i2.TodoModel>>);

  @override
  _i6.Future<int> updateTodo(_i2.TodoModel? todo) => (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [todo],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<int> deleteTodo(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [id],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
}
